// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles Enum
enum UserRole {
  USER
  ADMIN_ORGANIZER
  OWNER_ORGANIZER
  SUPERADMIN
}

// Event Status Enum
enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

// Ticket Status Enum
enum TicketStatus {
  ACTIVE
  INACTIVE
  SOLD_OUT
}

// Order Status Enum
enum OrderStatus {
  PENDING
  RESERVED
  PAID
  CANCELLED
  EXPIRED
}

// Payment Status Enum
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// User Model
model User {
  id          String   @id @default(cuid())
  supabase_id String   @unique
  email       String   @unique
  first_name  String?
  last_name   String?
  avatar_url  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  user_organizations UserOrganization[]
  orders            Order[]
  checkin_logs      CheckinLog[]

  @@map("users")
}

// Organization Model
model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo_url    String?
  website     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  user_organizations UserOrganization[]
  events            Event[]

  @@map("organizations")
}

// UserOrganization Junction Table
model UserOrganization {
  id             String   @id @default(cuid())
  user_id        String
  organization_id String
  role           UserRole @default(USER)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relationships
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
  @@map("user_organizations")
}

// Event Model
model Event {
  id             String      @id @default(cuid())
  organization_id String
  title          String
  description    String?
  location       String?
  start_date     DateTime
  end_date       DateTime
  banner_url     String?
  status         EventStatus @default(DRAFT)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  // Relationships
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  tickets      Ticket[]
  orders       Order[]

  @@map("events")
}

// Ticket Model
model Ticket {
  id           String       @id @default(cuid())
  event_id     String
  name         String
  description  String?
  price        Decimal      @db.Decimal(10, 2)
  total_qty    Int
  sold_qty     Int          @default(0)
  sale_start   DateTime?
  sale_end     DateTime?
  status       TicketStatus @default(ACTIVE)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  // Relationships
  event       Event        @relation(fields: [event_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]

  @@map("tickets")
}

// Order Model
model Order {
  id             String      @id @default(cuid())
  user_id        String
  organization_id String
  event_id       String?
  total_amount   Decimal     @db.Decimal(10, 2)
  status         OrderStatus @default(PENDING)
  reserved_until DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  // Relationships
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  event        Event?       @relation(fields: [event_id], references: [id])
  order_items  OrderItem[]
  payments     Payment[]
  checkin_logs CheckinLog[]

  @@map("orders")
}

// OrderItem Model
model OrderItem {
  id        String  @id @default(cuid())
  order_id  String
  ticket_id String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  qr_code   String? // URL to QR code image

  // Relationships
  order  Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  ticket Ticket @relation(fields: [ticket_id], references: [id])

  @@map("order_items")
}

// Payment Model
model Payment {
  id            String        @id @default(cuid())
  order_id      String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("VND")
  payment_method String       // "stripe", "momo", etc.
  status        PaymentStatus @default(PENDING)
  transaction_id String?      // External payment provider transaction ID
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  // Relationships
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

// CheckinLog Model
model CheckinLog {
  id        String   @id @default(cuid())
  order_id  String
  user_id   String
  qr_code   String
  checked_in_at DateTime @default(now())
  notes     String?

  // Relationships
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("checkin_logs")
}

// EmailLog Model
model EmailLog {
  id        String   @id @default(cuid())
  user_id   String
  order_id  String?
  email_type String  // "order_confirmation", "payment_success", "ticket_delivery"
  status    String   // "sent", "failed", "pending"
  sent_at   DateTime @default(now())
  error     String?

  @@map("email_logs")
}

// WebhookLog Model
model WebhookLog {
  id           String   @id @default(cuid())
  organization_id String
  event_type   String   // "order_created", "payment_completed", "checkin_completed"
  payload      String   // JSON payload
  status       String   // "sent", "failed", "pending"
  retry_count  Int      @default(0)
  sent_at      DateTime @default(now())
  error        String?

  @@map("webhook_logs")
}
