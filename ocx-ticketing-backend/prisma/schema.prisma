// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

// User Roles Enum
enum UserRole {
  USER
  ADMIN_ORGANIZER
  OWNER_ORGANIZER
  SUPERADMIN
}

// Event Status Enum
enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

// Ticket Status Enum
enum TicketStatus {
  ACTIVE
  INACTIVE
  SOLD_OUT
}

// Order Status Enum
enum OrderStatus {
  PENDING
  RESERVED
  PAID
  CANCELLED
  EXPIRED
}

// Thêm enum trạng thái gửi mail ticket
enum SendingStatus {
  NOT_SENT
  SENDING
  SENT
  FAILED
}

// Payment Status Enum
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// User Model
model User {
  id          String   @id @default(cuid())
  supabase_id String   @unique
  email       String   @unique
  first_name  String?
  last_name   String?
  phone       String?
  avatar_url  String?
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  role        UserRole @default(USER)

  // Relationships
  user_organizations UserOrganization[]
  orders            Order[]
  checkin_logs      CheckinLog[]
  email_logs        EmailLog[]

  @@map("users")
}

// Organization Model
model Organization {
  id            String   @id @default(cuid())
  name          String
  description   String?
  contact_email String?
  phone         String?
  address       String?
  logo_url      String?
  website       String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relationships
  user_organizations UserOrganization[]
  events            Event[]
  orders            Order[] // <-- Thêm dòng này để fix lỗi Prisma relation
  webhook_logs      WebhookLog[]

  @@map("organizations")
}

// UserOrganization Junction Table
model UserOrganization {
  id             String   @id @default(cuid())
  user_id        String
  organization_id String
  role           UserRole @default(USER)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relationships
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
  @@map("user_organizations")
}

// Event Model
model Event {
  id             String      @id @default(cuid())
  organization_id String
  title          String
  description    String?
  location       String?
  checkin_logs   CheckinLog[]
  start_date     DateTime
  end_date       DateTime
  banner_url     String?
  status         EventStatus @default(DRAFT)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  // Relationships
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  tickets      Ticket[]
  orders       Order[]
  settings     EventSetting[]

  @@map("events")
}

// Event Setting Model
model EventSetting {
  id            String   @id @default(cuid())
  event_id      String
  setting_key   String   // "auto_send_confirm_email", "auto_send_ticket_email"
  setting_value String   // "true", "false"
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relationships
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([event_id, setting_key])
  @@map("event_settings")
}

// Ticket Model
model Ticket {
  id           String       @id @default(cuid())
  event_id     String
  name         String
  description  String?
  price        Decimal      @db.Decimal(10, 2)
  total_qty    Int
  sold_qty     Int          @default(0)
  sale_start   DateTime?
  sale_end     DateTime?
  status       TicketStatus @default(ACTIVE)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  // Relationships
  event       Event        @relation(fields: [event_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  checkin_logs CheckinLog[]

  @@map("tickets")
}

// Order Model
model Order {
  id             String      @id @default(cuid())
  user_id        String
  organization_id String
  event_id       String?
  total_amount   Decimal     @db.Decimal(10, 2)
  status         OrderStatus @default(PENDING)
  reserved_until DateTime?
  paid_at        DateTime?   // Thời điểm thanh toán thành công
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  // Thêm trường trạng thái gửi mail ticket
  sending_status SendingStatus @default(NOT_SENT)
  // Relationships
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  event        Event?       @relation(fields: [event_id], references: [id])
  order_items  OrderItem[]
  payments     Payment[]
  checkin_logs CheckinLog[]
  email_logs   EmailLog[]

  @@map("orders")
}

// OrderItem Model
model OrderItem {
  id        String  @id @default(cuid())
  order_id  String
  ticket_id String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relationships
  order  Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  ticket Ticket @relation(fields: [ticket_id], references: [id])
  codes  OrderItemCode[]

  @@map("order_items")
}

model OrderItemCode {
  id            String    @id @default(cuid())
  order_item_id String
  code          String    // Mã QR unique cho từng vé
  used          Boolean   @default(false) // Đã checkin chưa
  created_at    DateTime  @default(now()) // Ngày tạo code
  used_at       DateTime? // Thời điểm code được sử dụng
  active        Boolean   @default(true)  // Cho phép sử dụng mã code

  order_item    OrderItem @relation(fields: [order_item_id], references: [id], onDelete: Cascade)

  @@map("order_item_codes")
}

// Payment Model
model Payment {
  id            String        @id @default(cuid())
  order_id      String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("VND")
  payment_method String       // "stripe", "momo", "sepay", etc.
  status        PaymentStatus @default(PENDING)
  transaction_id String?      // External payment provider transaction ID
  
  // Sepay specific fields
  gateway       String?       // "VPBank", "Momo", etc.
  transaction_date DateTime?   // "2025-07-14 16:41:00"
  account_number String?      // "214244527"
  sub_account   String?       // null
  code          String?       // "OCX4140716404"
  content       String?       // "NHAN TU 0697044105922 TRACE 714203 ND OCX414071640460109021012"
  transfer_type String?       // "in"
  description   String?       // "BankAPINotify NHAN TU 0697044105922 TRACE 714203 ND OCX414071640460109021012"
  transfer_amount Decimal?    @db.Decimal(10, 2) // 10000
  reference_code String?      // "FT25195113530033"
  accumulated   Decimal?      @db.Decimal(10, 2) // 0
  sepay_id      Int?         // 17673873
  
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  // Relationships
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

// CheckinLog Model
model CheckinLog {
  id            String   @id @default(cuid())
  user_id       String
  ticket_id     String
  event_id      String
  order_id      String
  order_item_id String
  checkin_time  DateTime @default(now())
  verified_by   String
  notes         String?

  // Relationships
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ticket    Ticket    @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  order     Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("checkin_logs")
}

// EmailLog Model
model EmailLog {
  id         String   @id @default(cuid())
  user_id    String
  order_id   String?
  email_type String   // "order_confirmation", "payment_success", "ticket_delivery"
  status     String   // "sent", "failed", "pending"
  sent_at    DateTime @default(now())
  error      String?

  // Relationships
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [order_id], references: [id])

  @@map("email_logs")
}

// WebhookLog Model
model WebhookLog {
  id              String   @id @default(cuid())
  organization_id String
  event_type      String   // "order_created", "payment_completed", "checkin_completed"
  payload         String   // JSON payload
  status          String   // "sent", "failed", "pending"
  retry_count     Int      @default(0)
  sent_at         DateTime @default(now())
  error           String?

  // Relationships
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}
